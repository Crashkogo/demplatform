const express = require('express');
const { body, validationResult } = require('express-validator');
const { User, Role } = require('../models');
const { generateToken, authenticateToken } = require('../middleware/auth');

const router = express.Router();

// –í–∞–ª–∏–¥–∞—Ç–æ—Ä—ã
const loginValidation = [
    body('login')
        .isLength({ min: 3, max: 50 })
        .withMessage('–õ–æ–≥–∏–Ω –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—Ç 3 –¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤')
        .trim(),
    body('password')
        .isLength({ min: 6 })
        .withMessage('–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤')
];

// POST /api/auth/login - –í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É
router.post('/login', loginValidation, async (req, res) => {
    try {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        const errors = validationResult(req);
        if (!errors.isEmpty()) {
            return res.status(400).json({
                success: false,
                message: '–û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏',
                errors: errors.array()
            });
        }

        const { login, password } = req.body;

        // –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ä–æ–ª—å—é
        console.log('üîç –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', login);
        const user = await User.findOne({
            where: { login },
            include: [{ model: Role, as: 'roleData' }]
        });

        console.log('üîç –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω:', !!user);
        if (user) {
            console.log('üîç roleData –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç:', !!user.roleData);
            console.log('üîç roleId:', user.roleId);
        }

        if (!user) {
            return res.status(401).json({
                success: false,
                message: '–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å'
            });
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è
        const isPasswordValid = await user.comparePassword(password);
        if (!isPasswordValid) {
            return res.status(401).json({
                success: false,
                message: '–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å'
            });
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ä–æ–ª–∏
        if (!user.roleData) {
            console.error('‚ùå –†–æ–ª—å –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', user.login);
            return res.status(403).json({
                success: false,
                message: '–†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.'
            });
        }

        console.log('‚úÖ –†–æ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞:', user.roleData.name);

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—Ö–æ–¥–∞
        user.lastLogin = new Date();
        await user.save();

        // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞
        const token = generateToken(user.id);

        // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const permissions = user.roleData.getPermissions();
        console.log('‚úÖ –ü—Ä–∞–≤–∞ –ø–æ–ª—É—á–µ–Ω—ã:', Object.keys(permissions).length);

        // –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (—Ç–æ–ª—å–∫–æ ID –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏)
        const accessibleCategories = await user.getAccessibleCategories();
        const accessibleCategoryIds = accessibleCategories.map(cat => cat.id);
        console.log('‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–ª—É—á–µ–Ω—ã:', accessibleCategoryIds.length);

        const userObject = user.toSafeObject();

        // –§–æ—Ä–º–∏—Ä—É–µ–º –æ–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –≤–ª–æ–∂–µ–Ω–Ω–æ–π —Ä–æ–ª—å—é (—Ç–∞–∫–æ–π –∂–µ —Ñ–æ—Ä–º–∞—Ç –∫–∞–∫ –≤ /api/auth/me)
        const userWithRole = {
            ...userObject,
            Role: {
                id: user.roleData.id,
                name: user.roleData.name,
                description: user.roleData.description,
                isAdmin: user.roleData.isAdmin,
                canViewMaterials: user.roleData.canViewMaterials,
                canDownloadMaterials: user.roleData.canDownloadMaterials,
                canCreateMaterials: user.roleData.canCreateMaterials,
                canEditMaterials: user.roleData.canEditMaterials,
                canDeleteMaterials: user.roleData.canDeleteMaterials,
                canCreateCategories: user.roleData.canCreateCategories,
                canEditCategories: user.roleData.canEditCategories,
                canDeleteCategories: user.roleData.canDeleteCategories,
                canManageAllCategories: user.roleData.canManageAllCategories,
                canViewUsers: user.roleData.canViewUsers,
                canCreateUsers: user.roleData.canCreateUsers,
                canEditUsers: user.roleData.canEditUsers,
                canDeleteUsers: user.roleData.canDeleteUsers,
                canManageRoles: user.roleData.canManageRoles,
                canViewLogs: user.roleData.canViewLogs,
                allowedCategories: user.roleData.allowedCategories || []
            }
        };

        const response = {
            success: true,
            message: '–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è',
            token,
            user: userWithRole,
            permissions,
            accessibleCategoryIds
        };

        console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ª–æ–≥–∏–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', {
            login: userWithRole.login,
            roleName: userWithRole.Role.name,
            isAdmin: userWithRole.Role.isAdmin
        });

        res.json(response);

    } catch (error) {
        console.error('Login error:', error);
        res.status(500).json({
            success: false,
            message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
        });
    }
});

// GET /api/auth/me - –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
router.get('/me', authenticateToken, async (req, res) => {
    try {
        const userObject = req.user.toSafeObject();

        // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–æ–ª–∏
        const roleData = req.user.roleData;

        // –§–æ—Ä–º–∏—Ä—É–µ–º –æ–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –≤–ª–æ–∂–µ–Ω–Ω–æ–π —Ä–æ–ª—å—é
        const userWithRole = {
            ...userObject,
            Role: {
                id: roleData.id,
                name: roleData.name,
                description: roleData.description,
                isAdmin: roleData.isAdmin,
                canViewMaterials: roleData.canViewMaterials,
                canDownloadMaterials: roleData.canDownloadMaterials,
                canCreateMaterials: roleData.canCreateMaterials,
                canEditMaterials: roleData.canEditMaterials,
                canDeleteMaterials: roleData.canDeleteMaterials,
                canCreateCategories: roleData.canCreateCategories,
                canEditCategories: roleData.canEditCategories,
                canDeleteCategories: roleData.canDeleteCategories,
                canManageAllCategories: roleData.canManageAllCategories,
                canViewUsers: roleData.canViewUsers,
                canCreateUsers: roleData.canCreateUsers,
                canEditUsers: roleData.canEditUsers,
                canDeleteUsers: roleData.canDeleteUsers,
                canManageRoles: roleData.canManageRoles,
                canViewLogs: roleData.canViewLogs,
                allowedCategories: roleData.allowedCategories || []
            }
        };

        console.log('üì§ /api/auth/me - –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', {
            login: userWithRole.login,
            roleName: userWithRole.Role.name,
            isAdmin: userWithRole.Role.isAdmin
        });

        res.json({
            success: true,
            user: userWithRole
        });
    } catch (error) {
        console.error('Get user info error:', error);
        res.status(500).json({
            success: false,
            message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
        });
    }
});

// POST /api/auth/logout - –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã (–≤ –¥–∞–Ω–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —É—Å–ø–µ—Ö)
router.post('/logout', authenticateToken, (req, res) => {
    res.json({
        success: true,
        message: '–£—Å–ø–µ—à–Ω—ã–π –≤—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã'
    });
});

// POST /api/auth/verify - –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ç–æ–∫–µ–Ω–∞
router.post('/verify', authenticateToken, (req, res) => {
    res.json({
        success: true,
        message: '–¢–æ–∫–µ–Ω –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω',
        user: req.user.toSafeObject()
    });
});

module.exports = router; 