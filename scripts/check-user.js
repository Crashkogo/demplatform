// scripts/check-user.js
// –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

const { sequelize, User, Role } = require('../models');

async function checkUser() {
    try {
        console.log('üîÑ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
        await sequelize.authenticate();

        const login = process.argv[2] || 'admin';

        const user = await User.findOne({
            where: { login },
            include: [{ model: Role, as: 'roleData' }]
        });

        if (!user) {
            console.log(`‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å "${login}" –Ω–µ –Ω–∞–π–¥–µ–Ω`);
            process.exit(1);
        }

        console.log('\nüë§ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:');
        console.log(`   ID: ${user.id}`);
        console.log(`   –õ–æ–≥–∏–Ω: ${user.login}`);
        console.log(`   roleId: ${user.roleId}`);

        if (user.roleData) {
            console.log(`\nüìã –†–æ–ª—å:`);
            console.log(`   ID: ${user.roleData.id}`);
            console.log(`   –ù–∞–∑–≤–∞–Ω–∏–µ: ${user.roleData.name}`);
            console.log(`   isAdmin: ${user.roleData.isAdmin ? '‚úÖ' : '‚ùå'}`);
        } else {
            console.log(`\n‚ö†Ô∏è  –†–æ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!`);
        }

        console.log(`\n‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã`);

        process.exit(0);
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞:', error);
        process.exit(1);
    }
}

checkUser();

