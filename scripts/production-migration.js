// scripts/production-migration.js
// –°–∫—Ä–∏–ø—Ç –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–∞ production —Å–µ—Ä–≤–µ—Ä–µ
// –ü—Ä–∏–≤–æ–¥–∏—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å –º–æ–¥–µ–ª—è–º–∏ –±–µ–∑ –ø–æ—Ç–µ—Ä–∏ –¥–∞–Ω–Ω—ã—Ö

const { sequelize } = require('../config/database');
const { QueryInterface, DataTypes } = require('sequelize');

async function runProductionMigration() {
    const queryInterface = sequelize.getQueryInterface();

    try {
        console.log('\n========================================');
        console.log('üöÄ –ó–ê–ü–£–°–ö PRODUCTION –ú–ò–ì–†–ê–¶–ò–ò');
        console.log('========================================\n');

        // ============================================
        // –®–ê–ì 1: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        // ============================================
        console.log('üì° –®–∞–≥ 1/7: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
        await sequelize.authenticate();
        console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ\n');

        // ============================================
        // –®–ê–ì 2: –°–æ–∑–¥–∞–Ω–∏–µ/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã roles
        // ============================================
        console.log('üîß –®–∞–≥ 2/7: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã roles...');

        const tables = await queryInterface.showAllTables();

        if (!tables.includes('roles')) {
            console.log('   üìù –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã roles...');
            await queryInterface.createTable('roles', {
                id: {
                    type: DataTypes.INTEGER,
                    primaryKey: true,
                    autoIncrement: true
                },
                name: {
                    type: DataTypes.STRING(100),
                    allowNull: false,
                    unique: true
                },
                description: {
                    type: DataTypes.TEXT,
                    allowNull: true
                },
                is_admin: {
                    type: DataTypes.BOOLEAN,
                    defaultValue: false
                },
                can_view_materials: {
                    type: DataTypes.BOOLEAN,
                    defaultValue: true
                },
                can_download_materials: {
                    type: DataTypes.BOOLEAN,
                    defaultValue: false
                },
                can_create_materials: {
                    type: DataTypes.BOOLEAN,
                    defaultValue: false
                },
                can_edit_materials: {
                    type: DataTypes.BOOLEAN,
                    defaultValue: false
                },
                can_delete_materials: {
                    type: DataTypes.BOOLEAN,
                    defaultValue: false
                },
                can_create_categories: {
                    type: DataTypes.BOOLEAN,
                    defaultValue: false
                },
                can_edit_categories: {
                    type: DataTypes.BOOLEAN,
                    defaultValue: false
                },
                can_delete_categories: {
                    type: DataTypes.BOOLEAN,
                    defaultValue: false
                },
                can_manage_all_categories: {
                    type: DataTypes.BOOLEAN,
                    defaultValue: false
                },
                category_access_type: {
                    type: DataTypes.ENUM('all', 'selected'),
                    defaultValue: 'selected'
                },
                can_view_users: {
                    type: DataTypes.BOOLEAN,
                    defaultValue: false
                },
                can_create_users: {
                    type: DataTypes.BOOLEAN,
                    defaultValue: false
                },
                can_edit_users: {
                    type: DataTypes.BOOLEAN,
                    defaultValue: false
                },
                can_delete_users: {
                    type: DataTypes.BOOLEAN,
                    defaultValue: false
                },
                can_view_logs: {
                    type: DataTypes.BOOLEAN,
                    defaultValue: false
                },
                can_manage_roles: {
                    type: DataTypes.BOOLEAN,
                    defaultValue: false
                },
                created_at: {
                    type: DataTypes.DATE,
                    allowNull: true,
                    defaultValue: DataTypes.NOW
                },
                updated_at: {
                    type: DataTypes.DATE,
                    allowNull: true,
                    defaultValue: DataTypes.NOW
                }
            });
            console.log('   ‚úÖ –¢–∞–±–ª–∏—Ü–∞ roles —Å–æ–∑–¥–∞–Ω–∞');
        } else {
            console.log('   ‚ÑπÔ∏è  –¢–∞–±–ª–∏—Ü–∞ roles —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–æ–Ω–æ–∫...');

            // –ü–æ–ª—É—á–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
            const roleColumns = await queryInterface.describeTable('roles');

            // –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
            const requiredColumns = {
                name: { type: DataTypes.STRING(100), allowNull: false },
                description: { type: DataTypes.TEXT, allowNull: true },
                is_admin: { type: DataTypes.BOOLEAN, defaultValue: false },
                can_view_materials: { type: DataTypes.BOOLEAN, defaultValue: true },
                can_download_materials: { type: DataTypes.BOOLEAN, defaultValue: false },
                can_create_materials: { type: DataTypes.BOOLEAN, defaultValue: false },
                can_edit_materials: { type: DataTypes.BOOLEAN, defaultValue: false },
                can_delete_materials: { type: DataTypes.BOOLEAN, defaultValue: false },
                can_create_categories: { type: DataTypes.BOOLEAN, defaultValue: false },
                can_edit_categories: { type: DataTypes.BOOLEAN, defaultValue: false },
                can_delete_categories: { type: DataTypes.BOOLEAN, defaultValue: false },
                can_manage_all_categories: { type: DataTypes.BOOLEAN, defaultValue: false },
                category_access_type: { type: DataTypes.ENUM('all', 'selected'), defaultValue: 'selected' },
                can_view_users: { type: DataTypes.BOOLEAN, defaultValue: false },
                can_create_users: { type: DataTypes.BOOLEAN, defaultValue: false },
                can_edit_users: { type: DataTypes.BOOLEAN, defaultValue: false },
                can_delete_users: { type: DataTypes.BOOLEAN, defaultValue: false },
                can_view_logs: { type: DataTypes.BOOLEAN, defaultValue: false },
                can_manage_roles: { type: DataTypes.BOOLEAN, defaultValue: false },
                created_at: { type: DataTypes.DATE, allowNull: false },
                updated_at: { type: DataTypes.DATE, allowNull: false }
            };

            // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏
            for (const [columnName, columnDef] of Object.entries(requiredColumns)) {
                if (!roleColumns[columnName]) {
                    console.log(`   üìù –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ ${columnName}...`);
                    await queryInterface.addColumn('roles', columnName, columnDef);
                }
            }
            console.log('   ‚úÖ –¢–∞–±–ª–∏—Ü–∞ roles –æ–±–Ω–æ–≤–ª–µ–Ω–∞');
        }

        // ============================================
        // –®–ê–ì 3: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã users
        // ============================================
        console.log('\nüîß –®–∞–≥ 3/7: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã users...');

        const userColumns = await queryInterface.describeTable('users');

        // –î–æ–±–∞–≤–ª—è–µ–º created_at –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        if (!userColumns.created_at) {
            console.log('   üìù –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ created_at...');
            // –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤–ª—è–µ–º –∫–∞–∫ nullable
            await queryInterface.addColumn('users', 'created_at', {
                type: DataTypes.DATE,
                allowNull: true
            });
            // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ç–µ–∫—É—â–µ–π –¥–∞—Ç–æ–π –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–ø–∏—Å–µ–π
            await sequelize.query("UPDATE users SET created_at = NOW() WHERE created_at IS NULL");
            // –¢–µ–ø–µ—Ä—å –¥–µ–ª–∞–µ–º NOT NULL
            await queryInterface.changeColumn('users', 'created_at', {
                type: DataTypes.DATE,
                allowNull: false,
                defaultValue: DataTypes.NOW
            });
            console.log('   ‚úÖ –ö–æ–ª–æ–Ω–∫–∞ created_at –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞');
        }

        // –î–æ–±–∞–≤–ª—è–µ–º updated_at –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        if (!userColumns.updated_at) {
            console.log('   üìù –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ updated_at...');
            // –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤–ª—è–µ–º –∫–∞–∫ nullable
            await queryInterface.addColumn('users', 'updated_at', {
                type: DataTypes.DATE,
                allowNull: true
            });
            // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ç–µ–∫—É—â–µ–π –¥–∞—Ç–æ–π –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–ø–∏—Å–µ–π
            await sequelize.query("UPDATE users SET updated_at = NOW() WHERE updated_at IS NULL");
            // –¢–µ–ø–µ—Ä—å –¥–µ–ª–∞–µ–º NOT NULL
            await queryInterface.changeColumn('users', 'updated_at', {
                type: DataTypes.DATE,
                allowNull: false,
                defaultValue: DataTypes.NOW
            });
            console.log('   ‚úÖ –ö–æ–ª–æ–Ω–∫–∞ updated_at –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞');
        }

        // –î–æ–±–∞–≤–ª—è–µ–º role_id –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç (–≤—Ä–µ–º–µ–Ω–Ω–æ —Å allowNull: true)
        if (!userColumns.role_id) {
            console.log('   üìù –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ role_id...');
            await queryInterface.addColumn('users', 'role_id', {
                type: DataTypes.INTEGER,
                allowNull: true,
                references: {
                    model: 'roles',
                    key: 'id'
                },
                onUpdate: 'CASCADE',
                onDelete: 'RESTRICT'
            });
        }

        // –î–æ–±–∞–≤–ª—è–µ–º lastLogin –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        if (!userColumns.lastLogin && !userColumns.last_login) {
            console.log('   üìù –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ last_login...');
            await queryInterface.addColumn('users', 'last_login', {
                type: DataTypes.DATE,
                allowNull: true
            });
        }

        console.log('   ‚úÖ –¢–∞–±–ª–∏—Ü–∞ users –æ–±–Ω–æ–≤–ª–µ–Ω–∞\n');

        // ============================================
        // –®–ê–ì 4: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã categories
        // ============================================
        console.log('üîß –®–∞–≥ 4/7: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã categories...');

        const categoryColumns = await queryInterface.describeTable('categories');

        // –î–æ–±–∞–≤–ª—è–µ–º created_at –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        if (!categoryColumns.created_at) {
            console.log('   üìù –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ created_at...');
            // –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤–ª—è–µ–º –∫–∞–∫ nullable
            await queryInterface.addColumn('categories', 'created_at', {
                type: DataTypes.DATE,
                allowNull: true
            });
            // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ç–µ–∫—É—â–µ–π –¥–∞—Ç–æ–π –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–ø–∏—Å–µ–π
            await sequelize.query("UPDATE categories SET created_at = NOW() WHERE created_at IS NULL");
            // –¢–µ–ø–µ—Ä—å –¥–µ–ª–∞–µ–º NOT NULL
            await queryInterface.changeColumn('categories', 'created_at', {
                type: DataTypes.DATE,
                allowNull: false,
                defaultValue: DataTypes.NOW
            });
            console.log('   ‚úÖ –ö–æ–ª–æ–Ω–∫–∞ created_at –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞');
        }

        // –î–æ–±–∞–≤–ª—è–µ–º updated_at –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        if (!categoryColumns.updated_at) {
            console.log('   üìù –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ updated_at...');
            // –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤–ª—è–µ–º –∫–∞–∫ nullable
            await queryInterface.addColumn('categories', 'updated_at', {
                type: DataTypes.DATE,
                allowNull: true
            });
            // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ç–µ–∫—É—â–µ–π –¥–∞—Ç–æ–π –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–ø–∏—Å–µ–π
            await sequelize.query("UPDATE categories SET updated_at = NOW() WHERE updated_at IS NULL");
            // –¢–µ–ø–µ—Ä—å –¥–µ–ª–∞–µ–º NOT NULL
            await queryInterface.changeColumn('categories', 'updated_at', {
                type: DataTypes.DATE,
                allowNull: false,
                defaultValue: DataTypes.NOW
            });
            console.log('   ‚úÖ –ö–æ–ª–æ–Ω–∫–∞ updated_at –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞');
        }

        console.log('   ‚úÖ –¢–∞–±–ª–∏—Ü–∞ categories –æ–±–Ω–æ–≤–ª–µ–Ω–∞\n');

        // ============================================
        // –®–ê–ì 5: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã materials
        // ============================================
        console.log('üîß –®–∞–≥ 5/7: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã materials...');

        const materialColumns = await queryInterface.describeTable('materials');

        // –î–æ–±–∞–≤–ª—è–µ–º created_at –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        if (!materialColumns.created_at) {
            console.log('   üìù –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ created_at...');
            // –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤–ª—è–µ–º –∫–∞–∫ nullable
            await queryInterface.addColumn('materials', 'created_at', {
                type: DataTypes.DATE,
                allowNull: true
            });
            // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ç–µ–∫—É—â–µ–π –¥–∞—Ç–æ–π –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–ø–∏—Å–µ–π
            await sequelize.query("UPDATE materials SET created_at = NOW() WHERE created_at IS NULL");
            // –¢–µ–ø–µ—Ä—å –¥–µ–ª–∞–µ–º NOT NULL
            await queryInterface.changeColumn('materials', 'created_at', {
                type: DataTypes.DATE,
                allowNull: false,
                defaultValue: DataTypes.NOW
            });
            console.log('   ‚úÖ –ö–æ–ª–æ–Ω–∫–∞ created_at –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞');
        }

        // –î–æ–±–∞–≤–ª—è–µ–º updated_at –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        if (!materialColumns.updated_at) {
            console.log('   üìù –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ updated_at...');
            // –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤–ª—è–µ–º –∫–∞–∫ nullable
            await queryInterface.addColumn('materials', 'updated_at', {
                type: DataTypes.DATE,
                allowNull: true
            });
            // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ç–µ–∫—É—â–µ–π –¥–∞—Ç–æ–π –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–ø–∏—Å–µ–π
            await sequelize.query("UPDATE materials SET updated_at = NOW() WHERE updated_at IS NULL");
            // –¢–µ–ø–µ—Ä—å –¥–µ–ª–∞–µ–º NOT NULL
            await queryInterface.changeColumn('materials', 'updated_at', {
                type: DataTypes.DATE,
                allowNull: false,
                defaultValue: DataTypes.NOW
            });
            console.log('   ‚úÖ –ö–æ–ª–æ–Ω–∫–∞ updated_at –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞');
        }

        console.log('   ‚úÖ –¢–∞–±–ª–∏—Ü–∞ materials –æ–±–Ω–æ–≤–ª–µ–Ω–∞\n');

        // ============================================
        // –®–ê–ì 6: –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã role_categories
        // ============================================
        console.log('üîß –®–∞–≥ 6/7: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã role_categories...');

        if (!tables.includes('role_categories')) {
            console.log('   üìù –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã role_categories...');
            await queryInterface.createTable('role_categories', {
                role_id: {
                    type: DataTypes.INTEGER,
                    allowNull: false,
                    references: {
                        model: 'roles',
                        key: 'id'
                    },
                    onUpdate: 'CASCADE',
                    onDelete: 'CASCADE'
                },
                category_id: {
                    type: DataTypes.INTEGER,
                    allowNull: false,
                    references: {
                        model: 'categories',
                        key: 'id'
                    },
                    onUpdate: 'CASCADE',
                    onDelete: 'CASCADE'
                },
                created_at: {
                    type: DataTypes.DATE,
                    allowNull: true,
                    defaultValue: DataTypes.NOW
                },
                updated_at: {
                    type: DataTypes.DATE,
                    allowNull: true,
                    defaultValue: DataTypes.NOW
                }
            });

            // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ—Å—Ç–∞–≤–Ω–æ–π –ø–µ—Ä–≤–∏—á–Ω—ã–π –∫–ª—é—á
            await sequelize.query(
                'ALTER TABLE role_categories ADD PRIMARY KEY (role_id, category_id)'
            );

            console.log('   ‚úÖ –¢–∞–±–ª–∏—Ü–∞ role_categories —Å–æ–∑–¥–∞–Ω–∞');
        } else {
            console.log('   ‚ÑπÔ∏è  –¢–∞–±–ª–∏—Ü–∞ role_categories —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
        }

        console.log('   ‚úÖ –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –≥–æ—Ç–æ–≤–∞\n');

        // ============================================
        // –®–ê–ì 7: –°–æ–∑–¥–∞–Ω–∏–µ/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã audit_events
        // ============================================
        console.log('üîß –®–∞–≥ 7/7: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü—ã audit_events...');

        if (!tables.includes('audit_events')) {
            console.log('   üìù –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã audit_events...');
            await queryInterface.createTable('audit_events', {
                id: {
                    type: DataTypes.INTEGER,
                    primaryKey: true,
                    autoIncrement: true
                },
                user_id: {
                    type: DataTypes.INTEGER,
                    allowNull: true,
                    references: {
                        model: 'users',
                        key: 'id'
                    }
                },
                event_type: {
                    type: DataTypes.STRING,
                    allowNull: false
                },
                details: {
                    type: DataTypes.JSONB,
                    allowNull: true
                },
                created_at: {
                    type: DataTypes.DATE,
                    allowNull: true,
                    defaultValue: DataTypes.NOW
                },
                updated_at: {
                    type: DataTypes.DATE,
                    allowNull: true,
                    defaultValue: DataTypes.NOW
                }
            });
            console.log('   ‚úÖ –¢–∞–±–ª–∏—Ü–∞ audit_events —Å–æ–∑–¥–∞–Ω–∞');
        } else {
            console.log('   ‚ÑπÔ∏è  –¢–∞–±–ª–∏—Ü–∞ audit_events —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
        }

        console.log('\n========================================');
        console.log('üìä –ù–ê–ü–û–õ–ù–ï–ù–ò–ï –î–ê–ù–ù–´–ú–ò');
        console.log('========================================\n');

        // ============================================
        // –î–ê–ù–ù–´–ï: –°–æ–∑–¥–∞–Ω–∏–µ —Ä–æ–ª–∏ "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"
        // ============================================
        console.log('üë§ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–æ–ª–∏ "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"...');

        const [adminRole] = await sequelize.query(
            `INSERT INTO roles (
                name, description, is_admin,
                can_view_materials, can_download_materials, can_create_materials,
                can_edit_materials, can_delete_materials, can_create_categories,
                can_edit_categories, can_delete_categories, can_manage_all_categories,
                category_access_type, can_view_users, can_create_users,
                can_edit_users, can_delete_users, can_view_logs, can_manage_roles,
                created_at, updated_at
            ) VALUES (
                '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä', 
                '–ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º —Å–∏—Å—Ç–µ–º—ã', 
                true,
                true, true, true,
                true, true, true,
                true, true, true,
                'all', true, true,
                true, true, true, true,
                NOW(), NOW()
            )
            ON CONFLICT (name) 
            DO UPDATE SET
                description = EXCLUDED.description,
                is_admin = EXCLUDED.is_admin,
                can_view_materials = EXCLUDED.can_view_materials,
                can_download_materials = EXCLUDED.can_download_materials,
                can_create_materials = EXCLUDED.can_create_materials,
                can_edit_materials = EXCLUDED.can_edit_materials,
                can_delete_materials = EXCLUDED.can_delete_materials,
                can_create_categories = EXCLUDED.can_create_categories,
                can_edit_categories = EXCLUDED.can_edit_categories,
                can_delete_categories = EXCLUDED.can_delete_categories,
                can_manage_all_categories = EXCLUDED.can_manage_all_categories,
                category_access_type = EXCLUDED.category_access_type,
                can_view_users = EXCLUDED.can_view_users,
                can_create_users = EXCLUDED.can_create_users,
                can_edit_users = EXCLUDED.can_edit_users,
                can_delete_users = EXCLUDED.can_delete_users,
                can_view_logs = EXCLUDED.can_view_logs,
                can_manage_roles = EXCLUDED.can_manage_roles,
                updated_at = NOW()
            RETURNING id`,
            { type: sequelize.QueryTypes.SELECT }
        );

        const adminRoleId = adminRole.id;
        console.log(`‚úÖ –†–æ–ª—å "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä" —Å–æ–∑–¥–∞–Ω–∞/–æ–±–Ω–æ–≤–ª–µ–Ω–∞ (ID: ${adminRoleId})\n`);

        // ============================================
        // –î–ê–ù–ù–´–ï: –°–æ–∑–¥–∞–Ω–∏–µ —Ä–æ–ª–∏ "–ö–ª–∏–µ–Ω—Ç"
        // ============================================
        console.log('üë§ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–æ–ª–∏ "–ö–ª–∏–µ–Ω—Ç" (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)...');

        const [clientRole] = await sequelize.query(
            `INSERT INTO roles (
                name, description, is_admin,
                can_view_materials, can_download_materials,
                created_at, updated_at
            ) VALUES (
                '–ö–ª–∏–µ–Ω—Ç', 
                '–ë–∞–∑–æ–≤—ã–π –¥–æ—Å—Ç—É–ø –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É –∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏—é –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤', 
                false,
                true, true,
                NOW(), NOW()
            )
            ON CONFLICT (name) 
            DO UPDATE SET
                description = EXCLUDED.description,
                updated_at = NOW()
            RETURNING id`,
            { type: sequelize.QueryTypes.SELECT }
        );

        const clientRoleId = clientRole.id;
        console.log(`‚úÖ –†–æ–ª—å "–ö–ª–∏–µ–Ω—Ç" —Å–æ–∑–¥–∞–Ω–∞/–æ–±–Ω–æ–≤–ª–µ–Ω–∞ (ID: ${clientRoleId})\n`);

        // ============================================
        // –î–ê–ù–ù–´–ï: –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é admin
        // ============================================
        console.log('üîê –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ —Ä–æ–ª–∏ "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä" –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é "admin"...');

        const [adminUserResult] = await sequelize.query(
            `UPDATE users 
             SET role_id = :adminRoleId, updated_at = NOW()
             WHERE login = 'admin'
             RETURNING id, login`,
            {
                replacements: { adminRoleId },
                type: sequelize.QueryTypes.UPDATE
            }
        );

        if (adminUserResult && adminUserResult.length > 0) {
            console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é "admin" (ID: ${adminUserResult[0].id}) –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ —Ä–æ–ª—å "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"\n`);
        } else {
            console.log('‚ö†Ô∏è  –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å "admin" –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö\n');
        }

        // ============================================
        // –î–ê–ù–ù–´–ï: –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ —Ä–æ–ª–∏ –æ—Å—Ç–∞–ª—å–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
        // ============================================
        console.log('üë• –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ —Ä–æ–ª–∏ "–ö–ª–∏–µ–Ω—Ç" –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –±–µ–∑ —Ä–æ–ª–∏...');

        const [usersUpdated] = await sequelize.query(
            `UPDATE users 
             SET role_id = :clientRoleId, updated_at = NOW()
             WHERE role_id IS NULL`,
            {
                replacements: { clientRoleId },
                type: sequelize.QueryTypes.UPDATE
            }
        );

        console.log(`‚úÖ –†–æ–ª—å "–ö–ª–∏–µ–Ω—Ç" –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ ${usersUpdated.length || 0} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º\n`);

        // ============================================
        // –§–ò–ù–ê–õ: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ NOT NULL –¥–ª—è role_id
        // ============================================
        console.log('üîí –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è NOT NULL –¥–ª—è role_id...');

        await queryInterface.changeColumn('users', 'role_id', {
            type: DataTypes.INTEGER,
            allowNull: false,
            references: {
                model: 'roles',
                key: 'id'
            },
            onUpdate: 'CASCADE',
            onDelete: 'RESTRICT'
        });

        console.log('‚úÖ –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ\n');

        console.log('========================================');
        console.log('‚ú® –ú–ò–ì–†–ê–¶–ò–Ø –£–°–ü–ï–®–ù–û –ó–ê–í–ï–†–®–ï–ù–ê!');
        console.log('========================================\n');

        console.log('üìã –ò—Ç–æ–≥–∏:');
        console.log('   ‚úÖ –í—Å–µ —Ç–∞–±–ª–∏—Ü—ã –ø—Ä–∏–≤–µ–¥–µ–Ω—ã –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å –º–æ–¥–µ–ª—è–º–∏');
        console.log('   ‚úÖ –†–æ–ª—å "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä" —Å–æ–∑–¥–∞–Ω–∞ —Å–æ –≤—Å–µ–º–∏ –ø—Ä–∞–≤–∞–º–∏');
        console.log('   ‚úÖ –†–æ–ª—å "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä" –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é "admin"');
        console.log('   ‚úÖ –†–æ–ª—å "–ö–ª–∏–µ–Ω—Ç" –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –æ—Å—Ç–∞–ª—å–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º');
        console.log('   ‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –±–µ–∑ –ø–æ—Ç–µ—Ä—å\n');

    } catch (error) {
        console.error('\n‚ùå –û–®–ò–ë–ö–ê –ü–†–ò –í–´–ü–û–õ–ù–ï–ù–ò–ò –ú–ò–ì–†–ê–¶–ò–ò:');
        console.error(error);
        console.error('\n–°—Ç–µ–∫ –æ—à–∏–±–∫–∏:', error.stack);
        process.exit(1);
    } finally {
        await sequelize.close();
        console.log('üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ.\n');
        process.exit(0);
    }
}

// –ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–∏
runProductionMigration();

