/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Å–±—Ä–æ—Å–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
 * –í–ù–ò–ú–ê–ù–ò–ï: –£–¥–∞–ª—è–µ—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ!
 * 
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
 * node scripts/reset-db.js
 */

require('dotenv').config();
const { sequelize } = require('../models');
const readline = require('readline');

const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout
});

const question = (query) => {
    return new Promise(resolve => rl.question(query, resolve));
};

const resetDatabase = async () => {
    try {
        console.log('‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –ü–û–õ–ù–û–°–¢–¨–Æ –û–ß–ò–°–¢–ò–¢–¨ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö!');
        console.log('‚ö†Ô∏è  –í—Å–µ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –±–µ–∑–≤–æ–∑–≤—Ä–∞—Ç–Ω–æ —É–¥–∞–ª–µ–Ω—ã!\n');

        const answer = await question('–í—ã —É–≤–µ—Ä–µ–Ω—ã? –í–≤–µ–¥–∏—Ç–µ "yes" –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: ');

        if (answer.toLowerCase() !== 'yes') {
            console.log('\n‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞');
            rl.close();
            process.exit(0);
        }

        console.log('\nüîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL...');
        await sequelize.authenticate();
        console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ\n');

        console.log('üóëÔ∏è  –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü...');
        await sequelize.drop();
        console.log('‚úÖ –í—Å–µ —Ç–∞–±–ª–∏—Ü—ã —É–¥–∞–ª–µ–Ω—ã\n');

        console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–µ–Ω–∞!\n');
        console.log('üí° –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:');
        console.log('   1. npm run migrate - —Å–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—ã');
        console.log('   2. npm run seed - –∑–∞–ø–æ–ª–Ω–∏—Ç—å –Ω–∞—á–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏\n');

        rl.close();
        process.exit(0);
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error.message);
        console.error('\nüìã –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', error);
        rl.close();
        process.exit(1);
    }
};

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–±—Ä–æ—Å
resetDatabase();
