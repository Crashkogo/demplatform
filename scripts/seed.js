/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–∞—á–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
 * –°–æ–∑–¥–∞–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏ –±–∞–∑–æ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
 * 
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
 * node scripts/seed.js
 */

require('dotenv').config();
const { sequelize, User, Category, Material } = require('../models');

const seed = async () => {
    try {
        console.log('üå± –ù–∞—á–∞–ª–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–∞—á–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏...\n');

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        console.log('üîó –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL...');
        await sequelize.authenticate();
        console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ\n');

        // –°–æ–∑–¥–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        console.log('üë§ –°–æ–∑–¥–∞–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞...');
        const adminLogin = process.env.DEFAULT_ADMIN_LOGIN || 'admin';
        const adminPassword = process.env.DEFAULT_ADMIN_PASSWORD || 'admin123';

        const existingAdmin = await User.findOne({ where: { login: adminLogin } });

        if (existingAdmin) {
            console.log(`   ‚ö†Ô∏è  –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä "${adminLogin}" —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
        } else {
            await User.create({
                login: adminLogin,
                password: adminPassword,
                role: 'admin'
            });
            console.log(`   ‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–æ–∑–¥–∞–Ω:`);
            console.log(`      –õ–æ–≥–∏–Ω: ${adminLogin}`);
            console.log(`      –ü–∞—Ä–æ–ª—å: ${adminPassword}`);
        }

        // –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        console.log('\nüìÅ –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π...');

        const categories = [
            {
                name: '–í–∏–¥–µ–æ–º–∞—Ç–µ—Ä–∏–∞–ª—ã',
                description: '–û–±—É—á–∞—é—â–∏–µ –≤–∏–¥–µ–æ –∏ –≤–∏–¥–µ–æ–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏',
                order: 1,
                accessRoles: ['client', 'admin']
            },
            {
                name: '–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è',
                description: '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏',
                order: 2,
                accessRoles: ['client', 'admin']
            },
            {
                name: '–ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏',
                description: '–ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–æ–Ω–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã',
                order: 3,
                accessRoles: ['client', 'admin']
            },
            {
                name: '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è',
                description: '–ì—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∏ —Å—Ö–µ–º—ã',
                order: 4,
                accessRoles: ['client', 'admin']
            },
            {
                name: '–ü—Ä–æ—á–µ–µ',
                description: '–ü—Ä–æ—á–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã',
                order: 5,
                accessRoles: ['client', 'admin']
            }
        ];

        let createdCount = 0;
        let existingCount = 0;

        for (const categoryData of categories) {
            const existing = await Category.findOne({ where: { name: categoryData.name } });

            if (existing) {
                existingCount++;
                console.log(`   ‚ö†Ô∏è  –ö–∞—Ç–µ–≥–æ—Ä–∏—è "${categoryData.name}" —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
            } else {
                await Category.create(categoryData);
                createdCount++;
                console.log(`   ‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: ${categoryData.name}`);
            }
        }

        console.log(`\nüìä –ò—Ç–æ–≥–æ:`);
        console.log(`   –°–æ–∑–¥–∞–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: ${createdCount}`);
        console.log(`   –£–∂–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–ª–æ: ${existingCount}`);

        console.log('\n‚úÖ –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!\n');
        console.log('üí° –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:');
        console.log('   npm start\n');

        process.exit(0);
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:', error.message);
        console.error('\nüìã –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', error);
        process.exit(1);
    }
};

// –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ
seed();
