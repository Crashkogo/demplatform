// scripts/verify-migration.js
// –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏

const { sequelize } = require('../config/database');

async function verifyMigration() {
    try {
        console.log('\n========================================');
        console.log('üîç –ü–†–û–í–ï–†–ö–ê –ú–ò–ì–†–ê–¶–ò–ò');
        console.log('========================================\n');

        // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        console.log('üì° –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
        await sequelize.authenticate();
        console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ\n');

        const queryInterface = sequelize.getQueryInterface();
        const errors = [];
        const warnings = [];

        // ============================================
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü—ã roles
        // ============================================
        console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü—ã roles...');

        const tables = await queryInterface.showAllTables();

        if (!tables.includes('roles')) {
            errors.push('‚ùå –¢–∞–±–ª–∏—Ü–∞ roles –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
        } else {
            console.log('   ‚úÖ –¢–∞–±–ª–∏—Ü–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');

            const roleColumns = await queryInterface.describeTable('roles');
            const requiredRoleColumns = [
                'id', 'name', 'description', 'is_admin',
                'can_view_materials', 'can_download_materials', 'can_create_materials',
                'can_edit_materials', 'can_delete_materials', 'can_create_categories',
                'can_edit_categories', 'can_delete_categories', 'can_manage_all_categories',
                'category_access_type', 'can_view_users', 'can_create_users',
                'can_edit_users', 'can_delete_users', 'can_view_logs', 'can_manage_roles',
                'created_at', 'updated_at'
            ];

            for (const col of requiredRoleColumns) {
                if (!roleColumns[col]) {
                    errors.push(`‚ùå –í —Ç–∞–±–ª–∏—Ü–µ roles –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–æ–ª–æ–Ω–∫–∞ ${col}`);
                } else {
                    console.log(`   ‚úÖ –ö–æ–ª–æ–Ω–∫–∞ ${col} –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç`);
                }
            }
        }

        // ============================================
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü—ã users
        // ============================================
        console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü—ã users...');

        if (!tables.includes('users')) {
            errors.push('‚ùå –¢–∞–±–ª–∏—Ü–∞ users –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
        } else {
            console.log('   ‚úÖ –¢–∞–±–ª–∏—Ü–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');

            const userColumns = await queryInterface.describeTable('users');
            const requiredUserColumns = ['id', 'login', 'password', 'role_id', 'created_at', 'updated_at'];

            for (const col of requiredUserColumns) {
                if (!userColumns[col]) {
                    errors.push(`‚ùå –í —Ç–∞–±–ª–∏—Ü–µ users –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–æ–ª–æ–Ω–∫–∞ ${col}`);
                } else {
                    console.log(`   ‚úÖ –ö–æ–ª–æ–Ω–∫–∞ ${col} –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç`);
                }
            }

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ NOT NULL –¥–ª—è role_id
            if (userColumns.role_id && userColumns.role_id.allowNull === false) {
                console.log('   ‚úÖ –ö–æ–ª–æ–Ω–∫–∞ role_id –∏–º–µ–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ NOT NULL');
            } else if (userColumns.role_id && userColumns.role_id.allowNull === true) {
                warnings.push('‚ö†Ô∏è  –ö–æ–ª–æ–Ω–∫–∞ role_id –≤ —Ç–∞–±–ª–∏—Ü–µ users –º–æ–∂–µ—Ç –±—ã—Ç—å NULL (–æ–∂–∏–¥–∞–µ—Ç—Å—è NOT NULL)');
            }
        }

        // ============================================
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü—ã categories
        // ============================================
        console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü—ã categories...');

        if (!tables.includes('categories')) {
            errors.push('‚ùå –¢–∞–±–ª–∏—Ü–∞ categories –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
        } else {
            console.log('   ‚úÖ –¢–∞–±–ª–∏—Ü–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');

            const categoryColumns = await queryInterface.describeTable('categories');
            const requiredCategoryColumns = ['id', 'name', 'created_at', 'updated_at'];

            for (const col of requiredCategoryColumns) {
                if (!categoryColumns[col]) {
                    errors.push(`‚ùå –í —Ç–∞–±–ª–∏—Ü–µ categories –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–æ–ª–æ–Ω–∫–∞ ${col}`);
                } else {
                    console.log(`   ‚úÖ –ö–æ–ª–æ–Ω–∫–∞ ${col} –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç`);
                }
            }
        }

        // ============================================
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü—ã materials
        // ============================================
        console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü—ã materials...');

        if (!tables.includes('materials')) {
            errors.push('‚ùå –¢–∞–±–ª–∏—Ü–∞ materials –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
        } else {
            console.log('   ‚úÖ –¢–∞–±–ª–∏—Ü–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');

            const materialColumns = await queryInterface.describeTable('materials');
            const requiredMaterialColumns = ['id', 'title', 'created_at', 'updated_at'];

            for (const col of requiredMaterialColumns) {
                if (!materialColumns[col]) {
                    errors.push(`‚ùå –í —Ç–∞–±–ª–∏—Ü–µ materials –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–æ–ª–æ–Ω–∫–∞ ${col}`);
                } else {
                    console.log(`   ‚úÖ –ö–æ–ª–æ–Ω–∫–∞ ${col} –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç`);
                }
            }
        }

        // ============================================
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü—ã role_categories
        // ============================================
        console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü—ã role_categories...');

        if (!tables.includes('role_categories')) {
            errors.push('‚ùå –¢–∞–±–ª–∏—Ü–∞ role_categories –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
        } else {
            console.log('   ‚úÖ –¢–∞–±–ª–∏—Ü–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');

            const roleCategoryColumns = await queryInterface.describeTable('role_categories');
            const requiredRoleCategoryColumns = ['role_id', 'category_id'];

            for (const col of requiredRoleCategoryColumns) {
                if (!roleCategoryColumns[col]) {
                    errors.push(`‚ùå –í —Ç–∞–±–ª–∏—Ü–µ role_categories –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–æ–ª–æ–Ω–∫–∞ ${col}`);
                } else {
                    console.log(`   ‚úÖ –ö–æ–ª–æ–Ω–∫–∞ ${col} –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç`);
                }
            }
        }

        // ============================================
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        // ============================================
        console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö...');

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ–ª–∏ "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"
        const [adminRoles] = await sequelize.query(
            "SELECT * FROM roles WHERE name = '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä'",
            { type: sequelize.QueryTypes.SELECT }
        );

        if (!adminRoles) {
            errors.push('‚ùå –†–æ–ª—å "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        } else {
            console.log('   ‚úÖ –†–æ–ª—å "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä" —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');

            if (adminRoles.is_admin !== true) {
                errors.push('‚ùå –£ —Ä–æ–ª–∏ "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä" —Ñ–ª–∞–≥ is_admin –Ω–µ —Ä–∞–≤–µ–Ω true');
            } else {
                console.log('   ‚úÖ –§–ª–∞–≥ is_admin = true');
            }
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ–ª–∏ "–ö–ª–∏–µ–Ω—Ç"
        const [clientRoles] = await sequelize.query(
            "SELECT * FROM roles WHERE name = '–ö–ª–∏–µ–Ω—Ç'",
            { type: sequelize.QueryTypes.SELECT }
        );

        if (!clientRoles) {
            warnings.push('‚ö†Ô∏è  –†–æ–ª—å "–ö–ª–∏–µ–Ω—Ç" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)');
        } else {
            console.log('   ‚úÖ –†–æ–ª—å "–ö–ª–∏–µ–Ω—Ç" —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è admin
        const [adminUser] = await sequelize.query(
            "SELECT u.*, r.name as role_name FROM users u LEFT JOIN roles r ON u.role_id = r.id WHERE u.login = 'admin'",
            { type: sequelize.QueryTypes.SELECT }
        );

        if (!adminUser) {
            warnings.push('‚ö†Ô∏è  –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å "admin" –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ');
        } else {
            console.log('   ‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å "admin" —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');

            if (adminUser.role_name === '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä') {
                console.log('   ‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é "admin" –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ —Ä–æ–ª—å "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"');
            } else {
                errors.push(`‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é "admin" –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ —Ä–æ–ª—å "${adminUser.role_name}" –≤–º–µ—Å—Ç–æ "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"`);
            }
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ —Ä–æ–ª–∏
        const [usersWithoutRole] = await sequelize.query(
            "SELECT COUNT(*) as count FROM users WHERE role_id IS NULL",
            { type: sequelize.QueryTypes.SELECT }
        );

        if (usersWithoutRole.count > 0) {
            warnings.push(`‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω–æ ${usersWithoutRole.count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–π —Ä–æ–ª–∏`);
        } else {
            console.log('   ‚úÖ –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∏–º–µ—é—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ —Ä–æ–ª–∏');
        }

        // ============================================
        // –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        // ============================================
        console.log('\n========================================');
        console.log('üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–†–û–í–ï–†–ö–ò');
        console.log('========================================\n');

        if (errors.length === 0 && warnings.length === 0) {
            console.log('‚úÖ –í–°–ï –ü–†–û–í–ï–†–ö–ò –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!');
            console.log('   –ú–∏–≥—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.\n');
        } else {
            if (errors.length > 0) {
                console.log('‚ùå –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –û–®–ò–ë–ö–ò:\n');
                errors.forEach(err => console.log(`   ${err}`));
                console.log('');
            }

            if (warnings.length > 0) {
                console.log('‚ö†Ô∏è  –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø:\n');
                warnings.forEach(warn => console.log(`   ${warn}`));
                console.log('');
            }

            if (errors.length > 0) {
                console.log('‚ùó –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø: –ó–∞–ø—É—Å—Ç–∏—Ç–µ –º–∏–≥—Ä–∞—Ü–∏—é –ø–æ–≤—Ç–æ—Ä–Ω–æ –∏–ª–∏ –∏—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –≤—Ä—É—á–Ω—É—é.\n');
            }
        }

        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∞–±–ª–∏—Ü–∞–º
        console.log('üìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê:\n');

        const stats = await Promise.all([
            sequelize.query("SELECT COUNT(*) as count FROM users", { type: sequelize.QueryTypes.SELECT }),
            sequelize.query("SELECT COUNT(*) as count FROM roles", { type: sequelize.QueryTypes.SELECT }),
            sequelize.query("SELECT COUNT(*) as count FROM categories", { type: sequelize.QueryTypes.SELECT }),
            sequelize.query("SELECT COUNT(*) as count FROM materials", { type: sequelize.QueryTypes.SELECT })
        ]);

        console.log(`   üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${stats[0][0].count}`);
        console.log(`   üîê –†–æ–ª–µ–π: ${stats[1][0].count}`);
        console.log(`   üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏–π: ${stats[2][0].count}`);
        console.log(`   üìÑ –ú–∞—Ç–µ—Ä–∏–∞–ª–æ–≤: ${stats[3][0].count}`);
        console.log('');

        process.exit(errors.length > 0 ? 1 : 0);

    } catch (error) {
        console.error('\n‚ùå –û–®–ò–ë–ö–ê –ü–†–ò –ü–†–û–í–ï–†–ö–ï:');
        console.error(error);
        process.exit(1);
    } finally {
        await sequelize.close();
        console.log('üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ.\n');
    }
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏
verifyMigration();

