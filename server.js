// –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
require('dotenv').config();

const express = require('express');
const helmet = require('helmet');
const cors = require('cors');
const compression = require('compression');
const path = require('path');
const fs = require('fs');
const os = require('os');
const https = require('https');
const http = require('http');

// –ê–≤—Ç–æ–ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ development —Ä–µ–∂–∏–º–µ
if (process.env.NODE_ENV !== 'production') {
    try {
        const { autoApplyChanges } = require('./auto-apply');
        autoApplyChanges();
    } catch (error) {
        console.log('üìù –ê–≤—Ç–æ–ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ (—ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –≤ production)');
    }
}

// –ò–º–ø–æ—Ä—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
const config = require('./config');

// –ò–º–ø–æ—Ä—Ç –º–æ–¥–µ–ª–µ–π –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
const { sequelize, User, Category, Material } = require('./models');
const { testConnection, syncDatabase } = require('./config/database');

// –ò–º–ø–æ—Ä—Ç –º–∞—Ä—à—Ä—É—Ç–æ–≤
const authRoutes = require('./routes/auth');
const categoryRoutes = require('./routes/categories');
const materialRoutes = require('./routes/materials');
const adminRoutes = require('./routes/admin');
const roleRoutes = require('./routes/roles');

const app = express();

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ IP –∞–¥—Ä–µ—Å–∞
function getLocalIPAddress() {
    const interfaces = os.networkInterfaces();
    for (const name of Object.keys(interfaces)) {
        for (const iface of interfaces[name]) {
            // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º loopback –∏ non-IPv4 –∞–¥—Ä–µ—Å–∞
            if (iface.family === 'IPv4' && !iface.internal) {
                return iface.address;
            }
        }
    }
    return 'localhost';
}

// Middleware –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
app.use(helmet({
    contentSecurityPolicy: {
        directives: {
            defaultSrc: ["'self'"],
            scriptSrc: [
                "'self'",
                "'unsafe-inline'", // –î–ª—è inline —Å–∫—Ä–∏–ø—Ç–æ–≤
                "'unsafe-hashes'", // –î–ª—è onclick –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
                "https://code.jquery.com",
                "https://cdn.jsdelivr.net",
                "https://cdnjs.cloudflare.com"
            ],
            scriptSrcAttr: ["'unsafe-inline'"], // –†–∞–∑—Ä–µ—à–∞–µ–º inline –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
            styleSrc: [
                "'self'",
                "'unsafe-inline'",
                "https://cdn.jsdelivr.net",
                "https://cdnjs.cloudflare.com"
            ],
            imgSrc: [
                "'self'",
                "data:",
                "blob:",
                "https://cdnjs.cloudflare.com" // –î–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π jsTree
            ],
            connectSrc: [
                "'self'",
                "https://cdn.jsdelivr.net", // –î–ª—è source map —Ñ–∞–π–ª–æ–≤
                "https://cdnjs.cloudflare.com" // –î–ª—è source map —Ñ–∞–π–ª–æ–≤
            ],
            fontSrc: [
                "'self'",
                "https://cdn.jsdelivr.net"
            ],
            objectSrc: ["'none'"],
            mediaSrc: ["'self'", "blob:"],
            frameSrc: ["'self'"],
            workerSrc: ["'self'", "blob:"] // –î–ª—è jsTree workers
        }
    },
    crossOriginEmbedderPolicy: false,
    crossOriginOpenerPolicy: { policy: "same-origin" },
    hsts: {
        maxAge: 31536000, // 1 –≥–æ–¥
        includeSubDomains: true,
        preload: true
    },
    noSniff: true,
    frameguard: { action: 'deny' },
    xssFilter: true
}));

// –ü–æ–ª—É—á–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π IP –∞–¥—Ä–µ—Å
const localIP = getLocalIPAddress();

// Middleware –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞ HTTPS
app.use((req, res, next) => {
    // –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ HTTPS
    if (process.env.NODE_ENV === 'production' && req.header('x-forwarded-proto') !== 'https') {
        res.redirect(`https://${req.header('host')}${req.url}`);
    } else {
        next();
    }
});

// CORS
app.use(cors({
    origin: [
        'http://localhost:3000',
        'http://127.0.0.1:3000',
        `http://${localIP}:3000`,
        'https://localhost:3000',
        'https://127.0.0.1:3000',
        `https://${localIP}:3000`
    ],
    credentials: true
}));

// –°–∂–∞—Ç–∏–µ –æ—Ç–≤–µ—Ç–æ–≤
app.use(compression({
    filter: (req, res) => {
        // –ù–µ —Å–∂–∏–º–∞–µ–º —Ñ–∞–π–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ —Å–∂–∞—Ç—ã –∏–ª–∏ –±–∏–Ω–∞—Ä–Ω—ã–µ
        if (req.headers['x-no-compression'] ||
            res.getHeader('Content-Type')?.includes('video/') ||
            res.getHeader('Content-Type')?.includes('image/') ||
            res.getHeader('Content-Type')?.includes('application/octet-stream')) {
            return false;
        }
        return compression.filter(req, res);
    }
}));

// Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ (—Ç–æ–ª—å–∫–æ –≤ development)
if (process.env.NODE_ENV === 'development') {
    app.use((req, res, next) => {
        const start = Date.now();
        res.on('finish', () => {
            const duration = Date.now() - start;
            console.log(`${req.method} ${req.path} - ${res.statusCode} (${duration}ms)`);
        });
        next();
    });
}

// –ü–∞—Ä—Å–∏–Ω–≥ JSON
app.use(express.json({ limit: '500mb' }));
app.use(express.urlencoded({ extended: true, limit: '500mb' }));

// –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
app.use('/uploads', express.static(path.join(__dirname, 'uploads')));
app.use(express.static(path.join(__dirname, 'public')));

// API –º–∞—Ä—à—Ä—É—Ç—ã
app.use('/api/auth', authRoutes);
app.use('/api/categories', categoryRoutes);
app.use('/api/materials', materialRoutes);
app.use('/api/admin', adminRoutes);
app.use('/api/roles', roleRoutes);

// –û—Å–Ω–æ–≤–Ω—ã–µ HTML —Å—Ç—Ä–∞–Ω–∏—Ü—ã
app.get('/', (req, res) => {
    res.sendFile(path.join(__dirname, 'public', 'index.html'));
});

app.get('/app', (req, res) => {
    res.sendFile(path.join(__dirname, 'public', 'app.html'));
});

app.get('/admin', (req, res) => {
    res.sendFile(path.join(__dirname, 'public', 'admin.html'));
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ 404
app.use('*', (req, res) => {
    res.status(404).json({
        success: false,
        message: '–ú–∞—Ä—à—Ä—É—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω'
    });
});

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
app.use((err, req, res, next) => {
    console.error('Global error handler:', err);

    res.status(err.status || 500).json({
        success: false,
        message: err.message || '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
        ...(process.env.NODE_ENV === 'development' && { stack: err.stack })
    });
});

// –§—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
const initializeDatabase = async () => {
    try {
        console.log('üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL...');

        // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        const connectionSuccess = await testConnection();
        if (!connectionSuccess) {
            throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ PostgreSQL');
        }

        // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –º–æ–¥–µ–ª–∏ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
        console.log('üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–µ–π —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö...');
        await syncDatabase({ alter: true }); // alter: true –ø–æ–∑–≤–æ–ª—è–µ—Ç –æ–±–Ω–æ–≤–ª—è—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã

        console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö PostgreSQL –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ');

        // –°–æ–∑–¥–∞–µ–º —Ä–æ–ª—å –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        const { Role } = require('./models');
        let adminRole = await Role.findOne({ where: { isAdmin: true } });

        if (!adminRole) {
            adminRole = await Role.create({
                name: '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
                description: '–ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º —Å–∏—Å—Ç–µ–º—ã',
                isAdmin: true,
                canViewMaterials: true,
                canDownloadMaterials: true,
                canCreateMaterials: true,
                canEditMaterials: true,
                canDeleteMaterials: true,
                canCreateCategories: true,
                canEditCategories: true,
                canDeleteCategories: true,
                canManageAllCategories: true,
                categoryAccessType: 'all',
                canViewUsers: true,
                canCreateUsers: true,
                canEditUsers: true,
                canDeleteUsers: true,
                canViewLogs: true,
                canManageRoles: true
            });
            console.log('‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ä–æ–ª—å "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"');
        }

        // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        const adminExists = await User.findOne({ where: { login: config.defaultAdmin.login } });
        if (!adminExists) {
            const defaultAdmin = await User.create({
                login: config.defaultAdmin.login,
                password: config.defaultAdmin.password,
                roleId: adminRole.id
            });

            console.log(`üë§ –°–æ–∑–¥–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: ${config.defaultAdmin.login}`);
        }

        // –°–æ–∑–¥–∞–µ–º –∫–æ—Ä–Ω–µ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
        const rootCategoriesCount = await Category.count({ where: { parentId: null } });
        if (rootCategoriesCount === 0) {
            const demoCategories = [
                { name: '–î–æ–∫—É–º–µ–Ω—Ç—ã', description: '–†–∞–∑–ª–∏—á–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏ —Ñ–∞–π–ª—ã' },
                { name: '–í–∏–¥–µ–æ', description: '–í–∏–¥–µ–æ –º–∞—Ç–µ—Ä–∏–∞–ª—ã' },
                { name: '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è', description: '–ö–∞—Ä—Ç–∏–Ω–∫–∏ –∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏' },
                { name: '–û–±—É—á–µ–Ω–∏–µ', description: '–£—á–µ–±–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã' }
            ];

            for (const categoryData of demoCategories) {
                await Category.create(categoryData);
            }

            console.log('üìÅ –°–æ–∑–¥–∞–Ω—ã –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏');
        }

        // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –∑–∞–≥—Ä—É–∑–æ–∫
        const uploadsDir = config.uploadsPath;
        if (!fs.existsSync(uploadsDir)) {
            fs.mkdirSync(uploadsDir, { recursive: true });
            console.log('üìÇ –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–æ–∫');
        }

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error);
        process.exit(1);
    }
};

// –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
const startServer = async () => {
    try {
        await initializeDatabase();

        let server;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å HTTPS
        if (config.ssl.enabled && fs.existsSync(config.ssl.keyPath) && fs.existsSync(config.ssl.certPath)) {
            // HTTPS —Å–µ—Ä–≤–µ—Ä
            const options = {
                key: fs.readFileSync(config.ssl.keyPath),
                cert: fs.readFileSync(config.ssl.certPath)
            };

            server = https.createServer(options, app).listen(config.port, config.host, () => {
                console.log('üöÄ HTTPS –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω');
                console.log(`üîí –õ–æ–∫–∞–ª—å–Ω—ã–π URL: https://localhost:${config.port}`);
                console.log(`üåê –°–µ—Ç–µ–≤–æ–π URL: https://${localIP}:${config.port}`);
                console.log(`üë§ –ê–¥–º–∏–Ω: ${config.defaultAdmin.login} / ${config.defaultAdmin.password}`);
                console.log('üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã:');
                console.log(`   ‚Ä¢ –ì–ª–∞–≤–Ω–∞—è (–ª–æ–≥–∏–Ω): https://${localIP}:${config.port}/`);
                console.log(`   ‚Ä¢ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: https://${localIP}:${config.port}/app`);
                console.log(`   ‚Ä¢ –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å: https://${localIP}:${config.port}/admin`);
                console.log('üîó API endpoints:');
                console.log(`   ‚Ä¢ Auth: https://${localIP}:${config.port}/api/auth`);
                console.log(`   ‚Ä¢ Categories: https://${localIP}:${config.port}/api/categories`);
                console.log(`   ‚Ä¢ Materials: https://${localIP}:${config.port}/api/materials`);
                console.log(`   ‚Ä¢ Admin: https://${localIP}:${config.port}/api/admin`);
            });

            // –¢–∞–∫–∂–µ –∑–∞–ø—É—Å–∫–∞–µ–º HTTP —Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞ HTTPS
            http.createServer((req, res) => {
                res.writeHead(301, { "Location": "https://" + req.headers['host'] + req.url });
                res.end();
            }).listen(80, () => {
                console.log('üîÑ HTTP —Å–µ—Ä–≤–µ—Ä –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞ HTTPS (–ø–æ—Ä—Ç 80)');
            }).on('error', (err) => {
                if (err.code === 'EACCES') {
                    console.log('‚ö†Ô∏è  –ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –∫ –ø–æ—Ä—Ç—É 80 (—Ç—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)');
                }
            });

        } else {
            // HTTP —Å–µ—Ä–≤–µ—Ä (–¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)
            server = http.createServer(app).listen(config.port, config.host, () => {
                console.log('üöÄ HTTP –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω');
                console.log(`üìç –õ–æ–∫–∞–ª—å–Ω—ã–π URL: http://localhost:${config.port}`);
                console.log(`üåê –°–µ—Ç–µ–≤–æ–π URL: http://${localIP}:${config.port}`);
                console.log(`üë§ –ê–¥–º–∏–Ω: ${config.defaultAdmin.login} / ${config.defaultAdmin.password}`);
                console.log('üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã:');
                console.log(`   ‚Ä¢ –ì–ª–∞–≤–Ω–∞—è (–ª–æ–≥–∏–Ω): http://${localIP}:${config.port}/`);
                console.log(`   ‚Ä¢ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: http://${localIP}:${config.port}/app`);
                console.log(`   ‚Ä¢ –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å: http://${localIP}:${config.port}/admin`);
                console.log('üîó API endpoints:');
                console.log(`   ‚Ä¢ Auth: http://${localIP}:${config.port}/api/auth`);
                console.log(`   ‚Ä¢ Categories: http://${localIP}:${config.port}/api/categories`);
                console.log(`   ‚Ä¢ Materials: http://${localIP}:${config.port}/api/materials`);
                console.log(`   ‚Ä¢ Admin: http://${localIP}:${config.port}/api/admin`);
                console.log('');
                console.log('üí° –î–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è HTTPS –≤—ã–ø–æ–ª–Ω–∏—Ç–µ:');
                console.log('   node generate-ssl.js');
                console.log('   SSL_ENABLED=true npm start');
            });
        }

        // Graceful shutdown
        process.on('SIGTERM', () => {
            console.log('üì§ –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGTERM, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...');
            server.close(() => {
                console.log('üîå HTTP —Å–µ—Ä–≤–µ—Ä –∑–∞–∫—Ä—ã—Ç');
                sequelize.close().then(() => {
                    console.log('üìä –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å PostgreSQL –∑–∞–∫—Ä—ã—Ç–æ');
                    process.exit(0);
                });
            });
        });

        process.on('SIGINT', () => {
            console.log('üì§ –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGINT, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...');
            server.close(() => {
                console.log('üîå HTTP —Å–µ—Ä–≤–µ—Ä –∑–∞–∫—Ä—ã—Ç');
                sequelize.close().then(() => {
                    console.log('üìä –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å PostgreSQL –∑–∞–∫—Ä—ã—Ç–æ');
                    process.exit(0);
                });
            });
        });

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', error);
        process.exit(1);
    }
};

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
startServer();

module.exports = app; 